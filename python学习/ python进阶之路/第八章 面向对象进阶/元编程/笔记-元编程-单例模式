对象是通过类创建的，类是通过元类创建的，元类提供了创建类的元信息。所有的类都直接或间接的继承自object，所有的元类都直接或间接的继承自type。
python中对象有个魔法属性__class__,可以查看对象是由哪个类创建出来的：
这个type其实就是平时我们用来查看数据类型的内建函数：而其实type就是一个元类，它还有⼀种完全不同的功能：动态的创建类
语法为：type(类名, 由⽗类名称组成的元组（针对继承的情况，可以为空）， 包含属性的字典)
创建一个元类
最简单的，自定义一个继承自type的子类，想要使用它创建类对象时在类中使用__metaclass__声明一下：
>>> class Meta(type):
...     pass
...
>>> class Base(object):
...      __metaclass__ = Meta       # python2
...
>>> class Base(metaclass=Meta):     # python3
...     pass


事实上，__metaclass__实际上可以被任意调⽤，它只是规定了类“按照什么样的规则去生成”，并不需要是⼀个正式 的类
    比如，我们有一个比较二的需求：你决定在你的模块⾥，所有的类的属性都应该是⼤写形式。

>>> def upper_attr(future_class_name, future_class_parents, future_class_attr):
...     """遍历属性字典，把不是__开头的属性名字变为⼤写"""
...     newAttr = {}
...     for name,value in future_class_attr.items():
...             if not name.startswith("__"):
...                     newAttr[name.upper()] = value
...     return type(future_class_name, future_class_parents, newAttr)
​
>>> class Foo(object, metaclass=upper_attr):
...     bar= 'bip'
...
>>> foo = Foo()
>>> foo.bar
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Foo' object has no attribute 'bar'
>>> foo.BAR
'bip'
二、元类的应用
应用元类之前我们首先要知道使用元类编程的缺点：

实现麻烦
代码可读性不高
不易维护
其实在开头引用TimPeters的话就说明，不要随意在生产代码中使用元类，而且现有的编码规范也极不推荐使用。

好吧，了解元类的使用对你更深入理解一些框架是有帮助的，如果你执意要学习这门禁术，那就往下看吧！

===========================禁术分割线 =======================

就元类本身而言，它的作用是：

拦截类的创建
修改类
返回修改之后的类
使用元类还是有一些好处的：

意图更加明确。当然你的metaclass名字要起好
面向对象。可以隐式继承到子类
可以更好地组织代码
可以用__new__，__init__,__call__等方法更好地控制
https://zhuanlan.zhihu.com/p/114242597













单例模式
单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。

这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。

注意：

1、单例类只能有一个实例。
2、单例类必须自己创建自己的唯一实例。
3、单例类必须给所有其他对象提供这一实例。
介绍
意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。

主要解决：一个全局使用的类频繁地创建与销毁。

何时使用：当您想控制实例数目，节省系统资源的时候。

如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。

关键代码：构造函数是私有的。

应用实例：

1、一个班级只有一个班主任。
2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。
3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。
优点：

1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。
2、避免对资源的多重占用（比如写文件操作）。
缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。

使用场景：

1、要求生产唯一序列号。
2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。
3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。
注意事项：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。

https://zhuanlan.zhihu.com/p/51854665
https://www.runoob.com/design-pattern/singleton-pattern.html








